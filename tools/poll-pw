#! /bin/sh -e

# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2017 6WIND S.A.
# Copyright 2018 Mellanox Technologies, Ltd

URL=http://patches.dpdk.org/api
PAUSE_SECONDS=100

print_usage () {
	cat <<- END_OF_HELP
	usage: $(basename $0) [OPTIONS] <patch|series> <project> </path/to/last.txt> <command>

	Poll patchwork and call a command for each new patch/series id.
	The first date to filter with is read from the specified file.
	The command should use '$1' to be evaluated as the patch/series id.
	The date in the specified file is updated after each pull.
	END_OF_HELP
}

if ! command -v jq >/dev/null 2>&1 ; then
	printf "The command jq is unavailable, please install it.\n\n" >&2
	exit 1
fi

while getopts h arg ; do
	case $arg in
		h ) print_usage ; exit 0 ;;
		? ) print_usage >&2 ; exit 1 ;;
	esac
done

if [ $# -lt 4 ] ; then
	printf 'missing argument(s)\n\n' >&2
	print_usage >&2
	exit 1
fi
shift $(($OPTIND - 1))
resource_type=$1
project=$2
since_file=$3
shift 3
cmd=$*

if [ ! -f "$since_file" ] ; then
	printf "The file '$since_file' doesn't exist.\n\n" >&2
	exit 1
fi

if ! date -d "$(cat $since_file | tr '\n' ' ')" >/dev/null 2>&1 ; then
	printf "The file '$since_file' doesn't contain a valid date format.\n\n" >&2
	exit 1
fi

if [ "$resource_type" != "patch" -a "$resource_type" != "series" ] ; then
	printf "Unknown resource type '$resource_type'.\n\n" >&2
	print_usage >&2
	exit 1
fi

if ! curl -s $URL/projects/ | jq '.[].name' | grep -qi "^\"${project}\"$" ; then
	printf "The project '$project' doesn't exist.\n\n" >&2
	exit 1
fi

URL="${URL}/events/?category=${resource_type}-completed"

callcmd () # <patchwork id>
{
	eval $cmd
}

while true ; do
	date_now=$(date --utc '+%FT%T')
	since=$(date -d $(cat $since_file | tr '\n' ' ') '+%FT%T')
	page=1
	while true ; do
		ids=$(curl -s "${URL}&page=${page}&since=${since}" |
			jq "try ( .[] | select( .project.name == \"$project\" ) )" |
			jq "try ( .payload.${resource_type}.id )")
		[ -z "$(echo $ids | tr -d '\n')" ] && break
		for id in $ids ; do
			callcmd $id
		done
		page=$(($page + 1))
	done
	printf $date_now >$since_file
	# pause before next check
	sleep $PAUSE_SECONDS
done
